options
{
STATIC = false; // default TRUE
LOOKAHEAD = 1; // default 1
IGNORE_CASE = true; // default false
ERROR_REPORTING = true;
}

PARSER_BEGIN(Parser)
package com.google.code.alasc;

import java.io.*;
import java.util.*;

public class Parser {
	
	private StringBuffer flashListing;
	private DeclarationSet declarations;
	private ArrayList<Error> errors;
	private int profonditaCorrente;
	
	private Random random;
	
	// NOTE: non mettere il costruttore di default, non viene chiamato dall'implementazione di
	// parser.java. Bloody JavaCC!!!
		public ArrayList<Error>getErrors()	{	  return errors;	}	public String getCode(){	  return flashListing.toString();	}	public ArrayList<Declaration> getSymbolsTable(){	  return declarations.getHistory();	}
	
	// FIX: lettura pi√π efficiente
    private String loadTemplateSnippet(String url){
    	FileInputStream fis = null;
		try {
			fis = new FileInputStream(url);
		} catch (FileNotFoundException e) {
			System.out.println("Errore nell'apertura del file " + url);
		}
    	InputStreamReader isr = new InputStreamReader(fis);
    	BufferedReader myReader = new BufferedReader(isr);
    	
    	StringBuffer snippet = new StringBuffer();
    	String line = null;
    	
    	try {
			line = myReader.readLine();
		} catch (IOException e) {
			System.out.println("Errore nella lettura del file " + url);
		}
    	String eol = System.getProperty("line.separator");
    	while(line!=null){
    		snippet.append(line);
    		snippet.append(eol);
    		
    		try {
				line = myReader.readLine();
			} catch (IOException e) {
			System.out.println("Errore nella lettura del file " + url);
    		}
    	}
    	
    	return snippet.toString();
    }
    
    // TODO: far ritornare l'esito della compilazione come da UML
    public void parse(){
    	
    	// symbolsTable = new HashSet<Symbol>();
		declarations = new DeclarationSet();
		errors = new ArrayList<Error>();
		flashListing = new StringBuffer();
		profonditaCorrente = 0;
  	    random = new Random();
    	
    	// Inserisco l'intestazione del template
		flashListing.append(loadTemplateSnippet("templates/head.inc"));
		
		// Genero ed inserisco la personalizzazione del template
		try {
			String myCode = start();
			
			// Se avviene un errore, restituisco null
			if(myCode != null) {			
				Beautifier b = new SimpleBeautifier(2);
				myCode = b.beautify(myCode);
			
				flashListing.append(myCode);
			}
		} catch(ParseException pe) {
			System.out.println(pe.toString());
		} catch(SemanticException se) {
			System.out.println(se.toString());
		}
		
		// Inserisco la chiusura del template
		flashListing.append(loadTemplateSnippet("templates/tail.inc"));
    }

	private String nextForVariable() {
		// CHE PUUURAA...
		String token = Integer.toString(Math.abs(random.nextInt()), 36);
		return token;
	}

}
PARSER_END(Parser)

SKIP : { " " | "\t" | "\n" | "\r" }

TOKEN :
{
	<NUM: (["0"-"9"])+>
	| <VARNAME: ":"("_"|["A"-"Z"])("_"|["A"-"Z"]|["0"-"9"])*>
	| <FD: "FD">
	| <BK: "BK">
	| <LT: "LT">
	| <RT: "RT">
	| <CLEAN: "CLEAN">
	| <PENDOWN: "PENDOWN">
	| <PENUP: "PENUP">
	| <COLOR: "COLOR">
	| <SUM: "SUM">
	| <DIFFERENCE: "DIFFERENCE">
	| <PRODUCT: "PRODUCT">
	| <QUOTIENT: "QUOTIENT">
	| <MAKE: "MAKE">
	| <LET: "LET">
	| <LESS: "LESS?"> 
	| <GREATER: "GREATER?">
	| <EQUAL: "EQUAL?">
	| <NOTEQUAL: "NOTEQUAL?">
	| <IF: "IF">
	| <REPEAT: "REPEAT">
	| <LBRACKET: "[">
	| <RBRACKET: "]">
}

	

// TODO SUPERIMPORTANTE!!! USARE EBNF!!!
String start() throws SemanticException : {String list;}
{ 
	try{
	list = lista()
	{
		return list;
	}
	}catch(TokenMgrError e) {
		System.out.println("Errore lessicale");
		return null;
	}
}

// TODO COME SOPRA!
String lista() throws SemanticException : {String corr, succ;}
{
	corr = istr() succ = lista()
	{
		return corr + succ;
	}
	|
	{
		return "";
	}
}

String istr() throws SemanticException : {String op;}
{ 	
	try {
	(
	op = dr_op()
	{
		return op;
	} 
	|
	op = var_op()
	{
		return op;
	}
	|
	op = ctrl_str()
	{
		return op;
	}	
	) 
	} catch(ParseException e) {	
		error_skipto(e);
		return "";
	}
}

JAVACODE
void error_skipto(ParseException e) {
	System.err.println(e.toString());
	
  	Token t = getToken(0);
  
  	// Se t e' un var_op o un dr_op, consumo fino alla prossima istr
  	// Se t e' un ctrl_str, consumo fino alla parentesi chiusa
  
  	switch(t.kind) {
		case MAKE:
	  	case LET:
	  	
	  	case FD:
		case BK:
		case LT:
		case RT:
		case CLEAN:
		case PENDOWN:
		case PENUP:
		case COLOR:
			int i = 1;
	  		while(getToken(i).kind != MAKE &&
	  			getToken(i).kind != LET && 
	  			getToken(i).kind != FD &&
	  			getToken(i).kind != BK &&
	  			getToken(i).kind != LT &&
	  			getToken(i).kind != RT &&
	  			getToken(i).kind != CLEAN &&
	  			getToken(i).kind != PENDOWN &&
	  			getToken(i).kind != PENUP &&
	  			getToken(i).kind != COLOR &&
	  			getToken(i).kind != IF &&
	  			getToken(i).kind != REPEAT &&  		
	  			getToken(i).kind != EOF) {
	  			i++;
		  	}
  
	  		for(int j=0; j < i-1; j++) {
	  			getNextToken();
	  		}
	  		break;
	  		
	  	case IF:
	  	case REPEAT:
	  		i = 0;	
	  		int numLBracket = 0;
	  		do {	  			
	  			i++;
	  			if(getToken(i).kind == LBRACKET) {
	  				numLBracket++;
	  			} else if (getToken(i).kind == RBRACKET) {
	  				numLBracket--;
	  			}	  				  				  				  			
	  		} while(getToken(i).kind != RBRACKET || numLBracket > 0 );
	  		
	  		for(int j = 0; j < i; j++) {
	  			getNextToken();
	  		}
	  		
	  		break;
  	}
}

String dr_op() throws SemanticException : {String expr;}
{
	<FD> expr=n_value()
	{
		return "goForward(" + expr + ");";
	}
	|
	<BK> expr=n_value()
	{
		return "goBackward(" + expr + ");";
	}
	|
	<LT> expr=n_value()
	{
		return "rotateLeft(" + expr + ");";
	}
	|
	<RT> expr=n_value()
	{
		return "rotateRight(" + expr + ");";
	}
	|
	<COLOR> expr=n_value()
	{
		return "setColor(" + expr + ");";
	}
	|
	<CLEAN>
	{
		return "clearScreen();";
	}
	|
	<PENDOWN>
	{
		return "penDown();";
	}
	|
	<PENUP>
	{
		return "penUp();";
	}
}

String n_value() throws SemanticException : {String expr;}
{
	expr=n_oper()
	{
		return expr;
	}
	|
	expr=n_s_value()
	{
		return expr;
	}
}

String n_s_value() throws SemanticException : {Token t;}
{
	t=<VARNAME>
	{
		String varname = t.image.substring(1);
		
		if(!declarations.isReachable(varname, profonditaCorrente)) {
			throw new SemanticException("[" + t.beginLine + ":" + t.beginColumn + "] Variable " + varname + " isn't declared yet.");
		}
		declarations.setAsUsed(varname, profonditaCorrente);
		return varname;
	}
	|
	t=<NUM>
	{
		return t.image;
	}
}

String n_oper() throws SemanticException : {String expr1,expr2;}
{
	<SUM> expr1=n_s_value() expr2=n_s_value()
	{
		return expr1 + " + " + expr2;
	}
	|
	<DIFFERENCE> expr1=n_s_value() expr2=n_s_value()
	{
		return expr1 + " - " + expr2;
	}
	|
	<PRODUCT> expr1=n_s_value() expr2=n_s_value()
	{
		return expr1 + " * " + expr2;
	}
	|
	<QUOTIENT> expr1=n_s_value() expr2=n_s_value()
	{
		return expr1 + " / " + expr2;
	}
}

String var_op() throws SemanticException : {Token v,n=null;String expr,varname;}
{
	<MAKE> v=<VARNAME> (n=<NUM>)?
	{
		// Toglie i ":" iniziali dal nome della variabile
		varname = v.image.substring(1);
		
		// Controllo tabella dei simboli
		if (!declarations.isDeclarable(varname, profonditaCorrente)) {
			throw new SemanticException("[" + v.beginLine + ":" + v.beginColumn + "] Variable " + varname + " is already declared.");
		} else {
			declarations.addDeclaration(varname, profonditaCorrente, v.beginLine, v.beginColumn);
		}
		
		if (n != null) {
			return "var " + varname + " : Number = " + n.image + ";";
		}
		else {
			return "var " + varname + " : Number;";
		}
	}
	|
	<LET> v=<VARNAME> expr=n_value()
	{	
		// Toglie i ":" iniziali dal nome della variabile
		varname = v.image.substring(1);
		
		// Controllo che l'istruzione sia nello scope della variabile.
		if(!declarations.isReachable(varname, profonditaCorrente)) {
			throw new SemanticException("[" + v.beginLine + ":" + v.beginColumn + "] Variable " + varname + " isn't declared yet.");
		}
		declarations.setAsUsed(varname, profonditaCorrente);
		return varname + " = " + expr + ";";
	}
}

String b_oper() throws SemanticException : {String expr1,expr2;}
{
	<LESS> expr1=n_s_value() expr2=n_s_value()
	{
		return expr1 + " < " + expr2;
	}
	|
	<GREATER> expr1=n_s_value() expr2=n_s_value()
	{
		return expr1 + " > " + expr2;
	}
	|
	<EQUAL> expr1=n_s_value() expr2=n_s_value()
	{
		return expr1 + " == " + expr2;
	}
	|
	<NOTEQUAL> expr1=n_s_value() expr2=n_s_value()
	{
		return expr1 + " != " + expr2;
	}
}
	
String ctrl_str() throws SemanticException : {String v,l;}
{
	<IF> v = b_oper() <LBRACKET> {profonditaCorrente++;} l = lista() <RBRACKET> {declarations.pruneAllDeclarationsIn(profonditaCorrente); profonditaCorrente--;}
	{
		return "if ( " + v + " ) {" + l + "}";
	}
	|
	<REPEAT> v = n_value() <LBRACKET> {profonditaCorrente++;} l = lista() <RBRACKET> {declarations.pruneAllDeclarationsIn(profonditaCorrente); profonditaCorrente--;}
	{
		String forVariable = nextForVariable();
		return "for (var $" + forVariable + " : Number = 0; $" + forVariable + 
			" < (" + v + ") ; $" + forVariable + "++) {" + l + "}";
	}
}
