#summary Una serie di linee guida per la traduzione di codice Logo in codice ActionScript compilabile con MTASC.
#labels Phase-Implementation,Lang-IT

= Sommario =

All'interno del compilatore esisterà un componente che si occuperà di tradurre il codice Logo in codice !ActionScript. Si esaminerà la traduzione in !ActionScript di esempi di ognuna delle strutture definite nel sottoinsieme scelto.

= Strutture da tradurre =
Il primo problema da risolvere durante è la traduzione è la diversità fra il modello della grafica usato da Logo e quello usato da !ActionScript.

Quello di Logo si basa sul concetto di penna, cioè di un cursore mobile che è dotato di un orientamento, di un colore e di uno stato che indica se la penna è abbassata o alzata. Muovendo una penna con la punta abbassata da un punto A a un punto B, essa lascerà un tratto rettilineo. *In Logo, un tratto viene disegnato attraverso il punto d'origine, la lunghezza e l'orientamento*. Il sistema di riferimento prevede che l'origine degli assi sia al centro dello schermo. Le coordinate x crescono verso nord, quelle y verso est.

Il modello di disegno offerto da !ActionScript è diverso: *scelto uno stile del tratto (colore e spessore), si disegna un tratto a partire dal suo punto d'origine e dal suo punto finale*. Il modello di !ActionScript pone l'origine nel primo pixel in alto e a sinistra: le coordinate x aumentano verso est, quelle y verso in sud.

Sarà quindi necessario tenere conto di queste differenze durante il processo di traduzione.

Al fine di rendere più agevole la trasformazione dal modello di Logo a quello di !ActionScript, si è creata una classe !ActionScript che simula lo stato della penna.

{{{
class Pen {

	var theta : Number;
	var x : Number;
	var y : Number;
	var isDown: Boolean;
	var color : Number;
	
	function Pen() {
		// La penna e' al centro dell'immagine 800x600
		x = 400;
		y = 300;
		
		// Orientamento iniziale verso NORD
		theta = Math.PI/2;
		
		// Colore NERO
		color = 0;
		
		isDown = true;
	}
	
}
}}}

Il modello di listato prodotto dalla compilazione del codice Logo è il seguente:

{{{

class Disegno {
	
        // Oggetto penna utilizzato per tenere traccia dello stato del pennino.
	var penna : Pen;
	
	function Disegno() {

		penna = new Pen();
		
		// Qui il listato di primitive, risultato della compilazione.
		
	}
	
        // Qui le primitive per la traduzione
        function goForward(lunghezza : Number){...}
        
        ...

	static function main(mc) {
		var app : Disegno = new Disegno();
	}
}

}}}
== Primitive di disegno ==

== Istruzione FD ==
La traduzione dell'istruzione FD in ActionScript segue il seguente template:
{{{

function goForward(lunghezza : Number){
			
		_root.lineStyle(1,penna.color, 100);
			
		if (penna.isDown) {
			_root.moveTo(penna.x, penna.y);
			_root.lineTo(penna.x + lunghezza * Math.cos(penna.theta),
			penna.y - lunghezza * Math.sin(penna.theta));
		}
			
		penna.x = penna.x + lunghezza * Math.cos(penna.theta);
		penna.y = penna.y - lunghezza * Math.sin(penna.theta);
}

}}}
Viene innanzitutto impostato il pennello con il colore corrente. Se lo stato del pennello è _abbassato_, viene tracciata una linea dal punto attuale (`penna.x`, `penna.y`) al punto di coordinate finale (`penna.x + lunghezza * cos(penna.tetha)`, `penna.x - lunghezza * sen(penna.tetha)`). Da notare che la il valore delle ordinate viene decrementato, in quanto l'asse y nell'ActionScript è crescente verso il basso, mentre nel Logo è positivo verso l'alto.


== Istruzione BK ==
{{{

function goBackward(lunghezza : Number){
		goForward(-lunghezza);
}

}}}

== Istruzione LT ==
{{{

function rotateLeft(delta_angolo : Number){	
		penna.theta = (penna.theta + delta_angolo * Math.PI/180) % (2 * Math.PI);
}

}}}

== Istruzione RT ==
{{{

function rotateRight(delta_angolo : Number){	
		rotateLeft(-delta_angolo);
}

}}}

== Istruzione CLEAN ==
{{{

function clearScreen() {
	_root.clear();
}

}}}

== Istruzione PENDOWN ==
{{{

function penUp() {
	penna.isDown = false;
}

}}}

== Istruzione PENUP ==
{{{

function penUp() {
	penna.isDown = false;
}

}}}

== Istruzione COLOR ==
{{{

function setColor(color : Number) {
	penna.color = color % 16777216;
}

}}}

== Operazioni numeriche e booleane ==

== Operazioni sulle variabili ==
=== Istruzione di creazione MAKE ===
Qui due comportamenti

=== Istruzione d'assegnamento LET ===


== Strutture di controllo di flusso ==
=== Struttura condizionale IF ===
=== Struttura iterativa REPEAT ===
